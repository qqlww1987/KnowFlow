# 使用官方的sglang镜像作为基础（已包含sglang 0.4.7）
FROM lmsysorg/sglang:v0.4.7-cu124

# 设置构建参数
ARG MINERU_VERSION=2.1.10
ARG MODEL_SOURCE=modelscope

# 设置构建时标签
LABEL maintainer="KnowFlow Team"
LABEL description="MinerU with SGLang integration for document parsing"
LABEL version="${MINERU_VERSION}"
LABEL sglang.version="0.4.7"

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 安装OpenCV和MinerU pipeline模式所需的系统依赖
RUN apt-get update && apt-get install -y \
    libgl1 \
    libgl1-mesa-dev \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgstreamer1.0-0 \
    libgstreamer-plugins-base1.0-0 \
    git \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 设置pip镜像源（加速安装）
RUN pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple && \
    pip3 config set global.trusted-host pypi.tuna.tsinghua.edu.cn

# 设置工作目录
WORKDIR /app

# 先复制 requirements.txt 以利用 Docker 缓存
COPY requirements.txt .

# 安装 Python 依赖
RUN python3 -m pip install -U "mineru[all]==${MINERU_VERSION}" --break-system-packages && \
    python3 -m pip install -r requirements.txt --break-system-packages

# 复制配置文件和脚本（优先复制，利用Docker缓存）
COPY .env.example /app/
COPY start_with_env.sh /app/

# 设置启动脚本权限
RUN chmod +x  start_with_env.sh

# 复制应用代码（最后复制，避免频繁变更影响缓存）
COPY app.py /app/
COPY download_models.py /app/
# 设置模型下载环境变量
ENV MINERU_MODEL_SOURCE=${MODEL_SOURCE}
ENV HF_HUB_CACHE=/app/models/huggingface
ENV MODELSCOPE_CACHE=/app/models/modelscope
ENV MINERU_MODELS_DIR=/app/models

# 创建模型目录
RUN mkdir -p /app/models/huggingface /app/models/modelscope /app/models/pipeline /app/models/vlm

# 下载所有模型文件（pipeline + vlm）实现完全离线部署
RUN python3 download_models.py

# 设置基础环境变量
ENV PYTHONPATH=/app
ENV MINERU_MODEL_SOURCE=${MODEL_SOURCE}
ENV MINERU_MODELS_DIR=/app/models
ENV HF_HUB_CACHE=/app/models/huggingface
ENV MODELSCOPE_CACHE=/app/models/modelscope

# 设置默认运行时环境变量（与 start_with_env.sh 保持一致）
ENV INSTALL_TYPE=all
ENV API_PORT=8888
ENV SGLANG_PORT=30000
ENV SGLANG_HOST=0.0.0.0
ENV SGLANG_TP_SIZE=1
ENV SGLANG_DP_SIZE=1
ENV SGLANG_MEM_FRACTION_STATIC=0.9
ENV SGLANG_ENABLE_TORCH_COMPILE=false
ENV SGLANG_MAX_SEQ_LEN=8192
ENV SGLANG_BATCH_SIZE=32
ENV STARTUP_WAIT_TIME=15
ENV LOG_LEVEL=INFO
ENV VERBOSE=false

# 暴露端口（默认端口，可通过环境变量在运行时修改）
EXPOSE 8888 30000

# 添加健康检查（检查API服务，SGLang服务由start_with_env.sh内部检查）
HEALTHCHECK --interval=30s --timeout=10s --start-period=90s --retries=3 \
    CMD curl -f http://localhost:$API_PORT/health || exit 1

# 使用支持环境变量的启动脚本（默认）
# 用户可以通过 docker run 命令覆盖为 ./start_services.sh 使用简单模式
CMD ["./start_with_env.sh"]